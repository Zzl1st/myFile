tf.get_default_graph() #获取当前默认的计算图
tf.Graph()             #生成新的计算图
tf.add_to_collection() #将资源加入一个或多个集合中
tf.get_collection()    #获取一个集合里面的所有资源
tf.get_variable(<name>,<shape>,<initializer>)  #通过所给的名字创建或是返回一个变量
#以下有一些在TF中使用的初始化变量
tf.constant_initializer(value) #初始化一切所提供的值
tf.random_uniform_initializer(a,b) #从a到b均匀初始化
tf.random_normal_initializer(mean,stddev) #用所给的平均值和标准差初始化均匀分布

#Tensorflow中维护的集合变量
tf.GraphKeys.VARIABLES   #所有变量都会被自动地加入到这个集合变量中，用于持久化Tensorflow模型;且我们可以通过设置参数trainable的值来决定变量是否能被优化，如果是，则会被加入GraphKeys.TRAINABLE_VARIABLES集合，这个集合也是TF中默认的优化对象
tf.trainable_variables   #得到所有需要优化的参数

tf.GraphKeys.TRAINABLE_VARIABLEs   #可学习的变量（一般指神经网络中的参数），用于模型训练/生成模型可视化内容
tf.GraphKeys.SUMMARIES   #日志生成相关的张量，用于计算可视化
tf.GraphKeys.QUEUE_RUNNERS  #处理输入的QueueRunner，用于输出处理
tf.GraphKeys.MOVING_AVERAGE_VARIABLES   #所有计算了滑动平均值的变量，用于计算变量的滑动平均值

result.get_shape()   #获取结果张量的维度信息
tf.Tensor.eval()     #计算一个张量的取值
tf.InteractiveSession()   #自动将生成的会话注册为默认会话
tf.matmul(x,y)       #矩阵乘法，是矩阵之间的计算，而×是矩阵元素之间的直接相乘
tf.Variable          #保存和更新神经网络中的参数,且一个变量的值在被使用之前，需要被初始化

#Tensorflow中常见的随机数生成函数
tf.random_normal     #正态分布
tf.truncated_normal  #正态分布，但如果随机出来的值偏离平均值超过2个标准差，将被重新随机
tf.random_uniform    #均匀分布
tf.random_gamma      #Gamma分布

#Tensorflow中常见的常数生成函数
tf.zero
tf.ones
tf.fill
tf.constant

tf.global_variables_initializer   #[新]实现初始化所有变量的过程
feed_dict                         #字典，用于给placeholder指定取值

#几种常用的非线性激活函数
tf.nn.relu   #去线性化，使得输出的结果非线性化
tf.nn.conv2d( , , , ,) #实现卷积层的前向传播，有四个参数，具体见P146
tf.nn.bias_add    #给每一个节点加上偏置项，例子：tf.nn.bias_add(conv,biases)
tf.nn.max_pool  #实现了最大池化层的前向传播算法，它的参数和tf.nn.conv2d类似

tf.sigmoid
tf.tanh
eg:a = tf.nn.relu(tf.matmul(x, w1) + biases1)

tf.clip_by_value         #将一个张量中的数值限制在一个范围之内
tf.log                   #将张量中的所有元素依次取对数
tf.reduce_mean		 #计算平均数
tf.nn.softmax_cross_entropy_with_logits(y, y_)    #实现使用了softmax回归之后的交叉熵损失函数,其中y表示原始神经网络的输出结果，y_表示标准答案
#当分类问题只有一个正确答案时可以使用
tf.nn.sparse_softmax_cross_entropy_with_logits(y, y_)

tf.greater   #输入两个张量，比较这两个张量中每一个元素的大小，并返回比较结果
tf.where(以前叫tf.select)    #有三个参数，第一个为选择条件依据，当为True时，选择第二个参数的值，反之第三个
tf.train.exponential_dacay（0.1,global_step,100,0.96,staircase = True)    #实现了指数衰减学习率,初始学习率0.1,每训练100轮后学习率乘以0.96

tf.contrib.layers.l2_regularizer() #返回一个函数，这个函数可以计算一个给定参数的L2正则化项的值
tf.contrib.layers.l1_regularizer() #返回一个函数，这个函数可以计算一个给定参数的L1正则化项的值
tf.train.ExponentialMovingAverage  #实现滑动平均模型

input_data.read_data_sets   #自动将Mnist数据集划分为train,validation,test三个数据集
mnist.train.next_batch      #从所有的训练数据中读取一小部分作为一个训练batch

#inference函数可以把整个前向传播的过程抽象为一个函数，里面的参数包含了神经网络中所有的参数，但是一旦变量增多，存储不便，需要找到新的解决方法。
def inference(input_tensor,avg_class,weights1,biases1,weights2,biases2):

#通过一以下两个函数来完成“通过变量名获取变量的机制”
tf.get_variable #创建或者获取变量，变量名称是一个必填的参数，函数会根据这个名字去创建或者获取变量
举例：v = tf.get_variable("v",shape = [1],initializer = tf.constant_initializer(1.0))
     v =tf.Variable(tf.constant(1.0,shape[1],name="v")
tf.variable_scope  #来生成一个上下文管理器，并明确指定在这个上下文管理器中，tf.get_variable将直接获取已经
                   #生成的变量，通过使用不同的名字来隔离不同层的变量，这可以让每一层中的变量命名只需要考虑
                   #在当前层的作用


#TensorFlow中的变量初始化函数
tf.constant_initializer #将变量初始化为给定常量，主要参数是常量的取值
tf.random_normal_initializer  #将变量初始化为满足正态分布的随机值，主要参数是正态分布的均值和标准差
tf.truncated_normal_initializer(stddev = 0.1)  #将变量初始化为满足正态分布的随机值，但如果随机出来的值偏离平均值超过两个标准差，那么这个数将被重新随机
tf.random_uniform_initializer #将变量初始化为满足平均分布的随机值，主要参数为最大/最小值
tf.uniform_unit_initializer #将变量初始化为满足平均分布但不影响输出数量级的随机值，主要参数是factor(产生随机
                            #值时乘以的系数）
tf.zeros_initializer        #将变量设置为全0,主要参数是变量的维度
tf.ones_initializer         #将变量设置为全1,主要参数是变量的维度

tf.train.Saver

#为了方便加载时重命名滑动平均变量，tf.train.ExponentialMovingAverage提供了
variables_to_restore函数来生成tf.train.Saver类所需要的变量重命名字典

convert_variables_to_constant  #将计算图中的变量及其取值通过常量的方式保存，这样就能将整个TF计算图统一放在一
                               #个文件中
export_meta_graph              #支持以json格式导出MetaGraphDef Protocol Buffer,eg:
                               #saver = tf.train.Saver()
                               #saver.export_meta_graph("/path/.../model.ckpt.meta.json",as_text = True)

slim.arg_scope #可以用于设置默认的参数取值，第一个参数是一个函数列表，在这个列表上，在
	       #这个列表中的函数将使用默认的参数取值
               #例：调用slim.conv2d(net,320,[1.1])函数时会自动加上stride=1和padding='SAME'的参数
               #如果在函数调用时指定了stride，那么这里设置的默认值就不会再使用

tf.concat   #可以将多个矩阵拼接起来，第一个参数指定了拼接的维度，以下的‘3’代表了矩阵是在深度这个维度上
            #进行拼接的，而不是其他的长度和宽度维度

tensor.name  #获取张量的名称

					        #调整图像的大小#
tf.image.resize_images #功能是调整图像的大小，第一个参数是原始图像，第二个和第三个参数为调整后的图像大小
                       #method参数给出了调整图像大小的算法
                       #method取值0采用双线性插值法
                       #method取值1采用最近邻居法
                       #method取值2采用双三次插值法
                       #method取值3采用面积插值法
tf.image.resize_image_with_crop_or_pad   #调整图像的大小，其中，第一个参数为原始图像，第二个参数为调整后的
                                         #目标图像大小。如果原始图像的尺寸大于目标图像，那么这个函数会自动
                                         #截取原始图像中居中的部分;如果目标图像大于原始图像，这个函数会自动
                                         #在原始图像的四周填充全0背景

tf.image.central_crop            #按比例裁剪图像，第一个参数为原始图像，第二个为调整比例

						#图像翻转#
#将图像上下翻转
flipped = tf.image.flip_up_down(img_data)
#将图像左右翻转
flipped = tf.image.flip_left_right(img_data)
#将图像沿对角线翻转
flipped = tf.image.transpose_image(img_data)
	
						#随机图像翻转#
#以一定概率上下翻转图像#
flipped = tf.image.random_flip_up_down(img_data)
#以一定的概率左右翻转图像#
flipped = tf.image.random_flip_left_right(img_data)
                                                #图像色彩调整#
#将图像的亮度-0.5
adjusted = tf.image.adjust_brightness(img_data,-0.5)
#将图像的亮度+0.5
adjusted = tf.image.adjust_brightness(img_data,+0.5)
#在[-max_delta,max_delta]的范围内随机调整图像的亮度
adjusted = tf.image.random_brightness(image,max_delta)
                                                #图像的对比度#
#将图像的对比度-5
adjusted = tf.image.adjust_contrast(img_data,-5)
#在[lower,upper]的范围随机调整图的对比度
adjusted = tf.image.random_contrast(image,lower,upper)
                                                #图形的色相调整#
#色相加上0.1#
adjusted = tf.image.adjust_hue(image_data,0.1)
#在[-max_delta,max_delta]的范围随机调整图像的色相
#max_delta的取值在[0,0.5]之间
adjusted = tf.image.random_hue(image,max_delta)
                                                #调整图像的饱和度#
#将图像的饱和度-5
adjusted = tf.image.random.adjust_saturation(img_data,-5)
#在[lower,upper]的范围随机调整图的饱和度
adjusted = tf.image.random_saturation(image,lower,upper)
                                                #图像的标准化（亮度均值为0，方差为1）#
adjusted = tf.image.per_image_whitening(img_data)
